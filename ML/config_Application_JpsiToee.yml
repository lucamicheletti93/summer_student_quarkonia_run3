input: # files to use, set FD to null for binary classification
    prompt: /Users/lucamicheletti/GITHUB/ml4jpsi/data/sim_pp_13tev_sig_prompt.parquet.gzip
    FD: /Users/lucamicheletti/GITHUB/ml4jpsi/data/sim_pp_13tev_sig_nonprompt.parquet.gzip
    data: /Users/lucamicheletti/GITHUB/ml4jpsi/data/data_pp_13tev_bkg.parquet.gzip
    treename: null

output:
    leg_labels: # legend labels, keep the right number of classes
        Bkg: Background
        Prompt: Prompt J/psi
        FD: Feed-down J/psi
    out_labels: # output labels, keep the right number of classes
        Bkg: Bkg
        Prompt: Prompt
        FD: FD
    dir: '/Users/lucamicheletti/GITHUB/ml4jpsi/macro' # output dir

pt_ranges: # ranges in pt to split the data in the ml training and testing
    min: [0, 2, 4, 6] # list
    max: [2, 4, 6, 10] # list

data_prep:
    filt_bkg_mass: inv_mass < 2.7 or inv_mass > 3.2 # pandas query to select bkg candidates
    dataset_opt: equal  # change how the dataset is built, options available: 'equal', 'max_signal'
                        # 'equal' -> same number of prompt/FD/bkg (not using all the signal available)
                        # 'max_signal' -> try to use all the signal (prompt and FD) + add n_bkg = 2 * (n_prompt + n_FD)
    bkg_mult: [1., 1., 1., 1.] # list of multipliers for (nPrompt + nFD) used to determine nCandBkg in the 'max_signal' option
    seed_split: 42 # seed used for train_test_split(...)
    test_fraction: 1. # fraction of data used for test set and efficiencies --> set to 1. if you want to apply the model to the full dataframes  

ml:
    raw_output: False # use raw_output (True) of probability (False) as output of the model
    roc_auc_average: 'macro' # 'macro' or 'weighted'
    roc_auc_approach: 'ovo'  # 'ovo' or 'ovr'
    training_columns: [dcaxy_trk1, dcaz_trk1, tofbeta_trk1, tpcnsige_trk1, tpcdedx_trk1, tpcrrrows_trk1, tpcchi2_trk1, dcaxy_trk2, dcaz_trk2, tofbeta_trk2, tpcnsige_trk2, tpcdedx_trk2, tpcrrrows_trk2, tpcchi2_trk2, ppdt_cand] 
                       # list of training variables

    hyper_par: [{'max_depth':3, 'learning_rate':0.0238, 'n_estimators':1028, 'min_child_weight':5, 'colsample':0.9, 'n_jobs':4, 'tree_method':hist},
                {'max_depth':4, 'learning_rate':0.0210, 'n_estimators':1282, 'min_child_weight':5, 'colsample':0.9, 'n_jobs':4, 'tree_method':hist},
                {'max_depth':4, 'learning_rate':0.0210, 'n_estimators':1282, 'min_child_weight':5, 'colsample':0.9, 'n_jobs':4, 'tree_method':hist},
                {'max_depth':4, 'learning_rate':0.0210, 'n_estimators':1282, 'min_child_weight':5, 'colsample':0.9, 'n_jobs':4, 'tree_method':hist}]
                # list of dicts of hyperparameters (one for each pT bin)

    hyper_par_opt:
      do_hyp_opt: False # whether to do the parameter optimization
      njobs: 2 # number of parallel jobs used in hyper-parameter optimization, -1. to use all
      nfolds: 5 # number of folds used in cross validation
      initpoints: 5 # steps of random exploration you want to perform
      niter: 5 # steps for bayesian optimization
      bayes_opt_config: {'max_depth': !!python/tuple [2, 6], 
                        'learning_rate': !!python/tuple [0.02, 0.1]}
                        # configuration dictionary for optimize_params_bayes()
    
    saved_models: [/Users/lucamicheletti/GITHUB/ml4jpsi/macro/pt0_2/ModelHandler_pT_0_2.pickle, 
                   /Users/lucamicheletti/GITHUB/ml4jpsi/macro/pt2_4/ModelHandler_pT_2_4.pickle, 
                   /Users/lucamicheletti/GITHUB/ml4jpsi/macro/pt4_6/ModelHandler_pT_4_6.pickle, 
                   /Users/lucamicheletti/GITHUB/ml4jpsi/macro/pt6_10/ModelHandler_pT_6_10.pickle] # list of saved ModelHandler (path+file), compatible with the pt bins

plots:
    plotting_columns: [inv_mass, pt_cand, dcaxy_cand, dcaz_cand, ppdt_cand, dcaxy_trk1, dcaz_trk1, dcaxy_trk2, dcaz_trk2, tpcchi2_trk1, tpcchi2_trk2, tpcrrrows_trk1, tpcrrrows_trk2, tpcnsige_trk1, tpcnsige_trk2, tpcnsigpi_trk1, tpcnsigpi_trk2, tpcnsigp_trk1, tpcnsigp_trk2, tofbeta_trk1, tofbeta_trk2, tpcdedx_trk1, tpcdedx_trk2]
                       # list of variables to plot
    train_test_log: True # use log scale for plots of train and test distributions
  
appl: 
    column_to_save_list: ['inv_mass', 'pt_cand'] # list of variables saved in the dataframes with the applied models

standalone_appl:
    inputs: [] # list of parquet files for the model application
    output_names: [] # names for the outputs (one for each file)
    output_dir: null # output directory